#!/usr/bin/env python2.3
# -*- python -*-
from __future__ import division

__version__ = "$Revision: 1.1 $"

import itertools
from optparse import make_option, OptionParser
import sys

import tabdelim

MAIN_TBL_INDEX = 0
LOOKUP_TBL_INDEX = 1

def read_lookup(iterable, col_index):
    res = {}
    
    for row in iterable:
        try:
            res[row[col_index]] = row[:col_index] + row[col_index+1:] # exclude the joined column
        except IndexError:
            pass
        
    return res

def write_joined(reader_writer, col_index, lookup):
    if options.empty is not None: # could be ""
        len_longest_row = max(itertools.imap(len, lookup.itervalues()))

    # XXX: this would be more efficient if I wrote two loops, one
    # for options.empty and one for not
    for row in reader_writer:
        try:
            lookup_row = lookup[row[col_index]]
            if options.empty is not None:
                len_difference = len_longest_row - len(lookup_row)
                if len_difference > 0:
                    lookup_row.extend([options.empty] * len_difference)
            row.extend(lookup_row)
        except KeyError:
            if options.empty is not None:
                row.extend([options.empty] * len_longest_row)

def handle(filename):
    if filename == "-":
        return sys.stdin
    else:
        return file(filename)

def parse_options(args):
    global options

    parser = OptionParser(usage="%prog [OPTION]... MAIN-TABLE LOOKUP-TABLE",
                          version="%%prog %s" % __version__,
                          option_list=[
        make_option("-e", "--empty",
                    action="store", dest="empty", type="string", default=None,
                    metavar="EMPTY", help="replace missing input fields with EMPTY"),
        make_option("-1", "",
                    action="store", dest="field0", type="int", default=1,
                    metavar="FIELD", help="join on this FIELD of file 1"),
        make_option("-2", "",
                    action="store", dest="field1", type="int", default=1,
                    metavar="FIELD", help="join on this FIELD of file 2"),
        ])
    options, args = parser.parse_args(args)

    return args

def main(args):
    args = parse_options(args)
    assert len(args) == 2

    col_indexes = [index-1 for index in (options.field0, options.field1)]

    lookup = read_lookup(tabdelim.ListReader(handle(args[LOOKUP_TBL_INDEX])),
                         col_indexes[LOOKUP_TBL_INDEX])
    
    write_joined(tabdelim.ListReaderWriter(handle(args[MAIN_TBL_INDEX])),
                 col_indexes[MAIN_TBL_INDEX], lookup)

if __name__ == "__main__":
    sys.exit(main(sys.argv[1:]))
